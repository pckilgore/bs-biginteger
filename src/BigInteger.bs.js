// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var BigInteger = require("big-integer");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var BigIntegerException = Caml_exceptions.create("BigInteger.BigIntegerException");

function compare(t, number) {
  var match = t.compare(number[1]);
  switch (match) {
    case -1 :
        return /* LessThan */1;
    case 0 :
        return /* EqualTo */2;
    case 1 :
        return /* GreaterThan */0;
    default:
      throw BigIntegerException;
  }
}

function compareAbs(t, number) {
  var match = t.compareAbs(number[1]);
  switch (match) {
    case -1 :
        return /* LessThan */1;
    case 0 :
        return /* EqualTo */2;
    case 1 :
        return /* GreaterThan */0;
    default:
      throw BigIntegerException;
  }
}

function divmod(dividend, divisor) {
  var divModObject = dividend.divmod(divisor[1]);
  var quotient = divModObject.quotient;
  var remainder = divModObject.remainder;
  return /* record */[
          /* quotient */quotient,
          /* remainder */remainder
        ];
}

function toArray(number, radix) {
  var toArrayObject = number.toArray(radix[1]);
  var value = toArrayObject.value;
  var isNegative = toArrayObject.isNegative;
  return /* record */[
          /* value */value,
          /* isNegative */isNegative
        ];
}

function eq(prim, prim$1) {
  return prim.equals(prim$1[1]);
}

function geq(prim, prim$1) {
  return prim.greaterOrEquals(prim$1[1]);
}

function gt(prim, prim$1) {
  return prim.greater(prim$1[1]);
}

function leq(prim, prim$1) {
  return prim.lesserOrEquals(prim$1[1]);
}

function lt(prim, prim$1) {
  return prim.lesser(prim$1[1]);
}

function minus(prim, prim$1) {
  return prim.subtract(prim$1[1]);
}

function neq(prim, prim$1) {
  return prim.notEquals(prim$1[1]);
}

function over(prim, prim$1) {
  return prim.divide(prim$1[1]);
}

function plus(prim, prim$1) {
  return prim.add(prim$1[1]);
}

function remainder(prim, prim$1) {
  return prim.mod(prim$1[1]);
}

function times(prim, prim$1) {
  return prim.multiply(prim$1[1]);
}

function fromArray(array, $staropt$star, $staropt$star$1, param) {
  var base = $staropt$star !== undefined ? $staropt$star : 10;
  var isNegative = $staropt$star$1 !== undefined ? $staropt$star$1 : false;
  return BigInteger.fromArray(array, base, isNegative);
}

function toString(t, $staropt$star, param) {
  var base = $staropt$star !== undefined ? $staropt$star : 10;
  return t.toString(base);
}

var compareTo = compare;

exports.BigIntegerException = BigIntegerException;
exports.compare = compare;
exports.compareAbs = compareAbs;
exports.divmod = divmod;
exports.toArray = toArray;
exports.compareTo = compareTo;
exports.eq = eq;
exports.geq = geq;
exports.gt = gt;
exports.leq = leq;
exports.lt = lt;
exports.minus = minus;
exports.neq = neq;
exports.over = over;
exports.plus = plus;
exports.remainder = remainder;
exports.times = times;
exports.fromArray = fromArray;
exports.toString = toString;
/* big-integer Not a pure module */
